package GameState;

import Location.*;
import Main.GamePanel;
import TileMap.*;
import UtilityClasses.Inventory;
import UtilityClasses.Save;
import Entity.*;
import Entity.Enemies.*;
import Entity.Items.Accessories.*;
import Entity.Items.Foods.*;
import Entity.Items.Gems.*;
import Entity.Items.Ingredients.*;
import Entity.Items.Keys.*;
import Entity.Items.MobDrops.*;
import Entity.Items.Useables.*;
import Entity.NPCs.*;
import Entity.PartyMembers.*;
import Chatbox.*;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.util.ArrayList;

import org.apache.commons.lang3.SerializationUtils;

public class Level1State extends GameState implements Serializable {
	
	private TileMap tileMap;
	private Background bg;
	
	private Location location;
	
	public static Player player;
	public static Enemy enemyHit;
	public static Inventory inv;
	
	public static Carrie carrie;
	public static Carrie carrie2;
	public static Carrie carrie3;
	public static Carrie carrie4;
	
	private boolean chatboxOpen;
	
	// These three should all be based on LOCATION
	//private ArrayList<NPC> NPCs;
	//private ArrayList<Enemy> enemies;
	//private ArrayList<Tree> trees;
	
	public static ArrayList<PartyMember> partyMembers;
	public static ArrayList<Chatbox> subMenus;
	
	private long chatboxStartingTime;
	private int enemyRecentlyHit;
	public static final long chatboxDelay = 30;
	
	private int npcNumber;		// holds the value that the NPC that is currently talking is stored at in the arraylist
	
	private Chatbox cb;
	private OptionsChatbox optionsMenu;
	//private AlmostFillerChatbox itemsMenu;
	private ItemsChatbox itemsMenu;
	private boolean battlePhaseStarting;
	
	public Level1State(GameStateManager gsm) {
		this.gsm = gsm;
		init();
	}
	
	@Override
	public int returnStateType() {
		return GameStateManager.LEVEL1STATE;
	}
	
	@Override
	public void init() {
		location = new Location();
		tileMap = location.getTileMap();
		
		battlePhaseStarting = false;
		
		// This may need to be put in location later.
		bg = new Background("/Backgrounds/grassbg1.gif", 0.1); // .1 is the move scale, 10% tilemap speed
		
		partyMembers = new ArrayList<PartyMember>();
		
		player = new Player(tileMap);
		player.setPosition(64, 96);
		carrie = new Carrie(tileMap);
		carrie2 = new Carrie(tileMap);
		carrie3 = new Carrie(tileMap);
		carrie4 = new Carrie(tileMap);

		partyMembers.add(player);

		// Inventory Shenanigans
		inv = new Inventory();
		inventoryShenanigans();
		
		// Chatbox Initialization
		subMenus = new ArrayList<Chatbox>();
		optionsMenu = new OptionsChatbox();
		itemsMenu = new ItemsChatbox(inv);
		gsm.removeBattleState();
	}
	
	@Override
	public void update() {
		//System.out.println("(" + player.getx() + "," + player.gety() + ")");
		if(BattleState.wonBattle == BattleState.WONBATTLE){
			//enemies.remove(enemyRecentlyHit);
			location.removeEnemy(enemyRecentlyHit);
			BattleState.wonBattle = BattleState.NOBATTLE;
		}
		else if(BattleState.wonBattle == BattleState.FLEDBATTLE){
			//enemies.remove(enemyRecentlyHit);
			location.removeEnemy(enemyRecentlyHit);
			BattleState.wonBattle = BattleState.NOBATTLE;
		}
		else if(BattleState.wonBattle == BattleState.LOSTBATTLE){
			gsm.setState(GameStateManager.ENDGAMESTATE);
		}
		// update player
		if(!chatboxOpen && !optionsMenu.isOpen()){
			player.update();	// SHRUGS
		}
		// Immediately update the location after player updates
		Location potentialNewLocation = location.update(player);
		if(potentialNewLocation != null) changeLocation(potentialNewLocation);
		if(player.isDead()) gsm.setState(GameStateManager.ENDGAMESTATE); 
		tileMap.setPosition(GamePanel.WIDTH / 2 - player.getx(), GamePanel.HEIGHT / 2 - player.gety());
		bg.setPosition(tileMap.getx(),  tileMap.gety());
		// attack enemies
		//player.checkAttack(enemies);
		gsm.removeBattleState();
		// check to see if battle phase should be initiated
		for(int j = 0; j < location.getNumEnemies(); j++){
			Enemy e = location.getEnemy(j);
			//Enemy e = enemies.get(j);
			if(player.intersects(e)){
				enemyHit = e;
				BattleState b = new BattleState(gsm);
				b.addEnemies(e);
				//enemies.remove(j);
				enemyRecentlyHit = j;
				gsm.addState(b);
				gsm.setState(GameStateManager.BATTLESTATE);
				if(!player.priorityEmpty()) player.emptyPriority();
				player.setHighSpeed(false);
			}
		}
	
		// update all enemies
		if(!chatboxOpen && !optionsMenu.isOpen()){
			location.update();
		}
	}
	
	public void inventoryShenanigans() {
		Spinthariscope spinthariscope = new Spinthariscope();
		inv.add(spinthariscope);
		for(int j = 0; j < 12; j++){
			spinthariscope = new Spinthariscope();
			inv.add(spinthariscope);
		} 
		System.out.println("Spinthariscope count: " + inv.getKeyCount());
		Sandwich sandwich = new Sandwich();
		inv.add(sandwich);
		Potion potion = new Potion();
		inv.add(potion);
		potion = new Potion();
		inv.add(potion);
		HyperPotion hpotion = new HyperPotion();
		inv.add(hpotion);
		BattleGem gem = new BattleGem();
		inv.add(gem);
		StrangePlant strangePlant = new StrangePlant();
		inv.add(strangePlant);
		MobSkull mobskull = new MobSkull();
		inv.add(mobskull);
		Pendant accessory = new Pendant();
		inv.add(accessory);
		XKey xkey = new XKey();
		inv.add(xkey);
	}
	
	@Override
	public void draw(Graphics2D g) {
		// clear screen
		g.setColor(Color.WHITE);
		g.fillRect(0,0,GamePanel.WIDTH, GamePanel.HEIGHT);  
		//bg.draw(g);	// Draw background
		tileMap.draw(g);
		player.draw(g);	// Draw Player
		// draw dialogue/chatbox
	/*	player.checkChatting(NPCs);						MAYBE BRING THIS BACK LATER
		for(int j = 0; j < NPCs.size(); j++){
			if(NPCs.get(j).getChatting()){
				//cb = new Chatbox(NPCs.get(j).getFirstChatbox(), Chatbox.NORMAL, 15, GamePanel.HEIGHT-21); 
				if(NPCs.get(j).hasSecondLine()){
					cb = new Chatbox(NPCs.get(j).getCurrentChatbox(), NPCs.get(j).getCurrentChatboxLine2());
				}
				else{
					cb = new Chatbox(NPCs.get(j).getCurrentChatbox());
				}
				//cb = new Chatbox(NPCs.get(j).getFirstChatbox()); // default chatbox
				//cb.draw(g);
				chatboxOpen = true;
				chatboxStartingTime = System.nanoTime();
			}
		} */
		
		if(chatboxOpen) cb.draw(g); 	// Draw the chatbox if it exists
		location.drawEnemies(g);
		location.drawNPCs(g);
		location.drawTrees(g);
		
		optionsMenu.draw(g);
		itemsMenu.draw(g);
	}
	
	public void changeLocation(Location location) {
		this.location = location;
		tileMap = location.getTileMap();
		for(int j = 0; j < partyMembers.size(); j++){
			partyMembers.get(j).setTileMap(location.getTileMap());
		}
		player.setXY(location.getX(), location.getY());
		System.out.println(location.getX() + location.getY());
		location.populateEnemies();
		location.populateNPCs();
		location.populateTrees();
	}
	
	@Override
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_UP){
			player.addPriority(Player.PRIORITYUP);
			if(!subMenus.isEmpty()){
				subMenus.get(subMenus.size() - 1).goUp();
			}
			else
				if(optionsMenu.isOpen())
					optionsMenu.goUp();
		}
		else if(k == KeyEvent.VK_DOWN){
			player.addPriority(Player.PRIORITYDOWN);
			if(!subMenus.isEmpty()){
				subMenus.get(subMenus.size() - 1).goDown();
			}
			else
				if(optionsMenu.isOpen())
					optionsMenu.goDown();
		}
		else if(k == KeyEvent.VK_LEFT){
			player.addPriority(Player.PRIORITYLEFT);
			if(!subMenus.isEmpty()){
				subMenus.get(subMenus.size() - 1).goLeft();
			}
		}
		else if(k == KeyEvent.VK_RIGHT) {
			player.addPriority(Player.PRIORITYRIGHT);
			if(!subMenus.isEmpty()){
				subMenus.get(subMenus.size() - 1).goRight();
			}
		}
		else if(k == KeyEvent.VK_ENTER){
			if(optionsMenu.isOpen()){
				int optionsEnter = optionsMenu.enter();
				switch(optionsEnter){
				case OptionsChatbox.ITEMS:
					itemsMenu.open();
					subMenus.add(itemsMenu);
					break;
				case OptionsChatbox.SKILLS:
				case OptionsChatbox.STATUS:
				case OptionsChatbox.PARTY:
				case OptionsChatbox.CHANGELOCATION:
					if(location.getLocationName().equals("Starting Area")){
						changeLocation(new SmallPond());
					}
					else{
						changeLocation(new Location());
					}
					break;
				case OptionsChatbox.SAVE:
					Save saveFile = new Save("C:/achnic/achnicsave.out");
					try { saveFile.write(this.serialize()); }
					catch(Exception e){ e.printStackTrace(); }
					break;
				case OptionsChatbox.OPTIONS:
				}
			}
		}
		else if(k == KeyEvent.VK_BACK_SPACE){
			if(itemsMenu.isOpen()){
				itemsMenu.close();
				subMenus.remove(itemsMenu);
			}
		}
		if(k == KeyEvent.VK_V){ player.setHighSpeed(true); }
		if(k == KeyEvent.VK_C){ if(optionsMenu.isOpen()) optionsMenu.close(); else optionsMenu.open(); }
		/*
		if(k == KeyEvent.VK_A){
			if(player.getChatting() == true){
				for(int j = 0; j < NPCs.size(); j++){
					if(NPCs.get(j).getChatting()){
						NPCs.get(j).incrementChatboxCounter();
						String s = NPCs.get(j).getCurrentChatbox();
						if(s.equals("-0")){
							NPCs.get(j).setChatting(false);
							player.setChatting(false);
							chatboxOpen = false;
							NPCs.get(j).resetChatbox();
						}
						else{
							if(NPCs.get(j).hasSecondLine()){
								String t = NPCs.get(j).getCurrentChatboxLine2();
								cb = new Chatbox(s, t);
								chatboxOpen = true;
								chatboxStartingTime = System.nanoTime();
							}
							else{
								cb = new Chatbox(s); 
								chatboxOpen = true;
								chatboxStartingTime = System.nanoTime();
							}
						}
					}
				}
			}
			else{
				npcNumber = player.checkIfPlayerCanChat(NPCs);
				if(npcNumber != -1){
					if(NPCs.get(npcNumber).hasSecondLine()){
						cb = new Chatbox(NPCs.get(npcNumber).getCurrentChatbox(), NPCs.get(npcNumber).getCurrentChatboxLine2());
					}
					else{
						cb = new Chatbox(NPCs.get(npcNumber).getCurrentChatbox());
					}
					chatboxOpen = true;
					chatboxStartingTime = System.nanoTime();
					if(!(partyMembers.contains(carrie))){
						partyMembers.add(carrie);
						partyMembers.add(carrie2);
						partyMembers.add(carrie3);
						partyMembers.add(carrie4); 
						System.out.println("Carrie added to party");
					}
				} 
			}
		} */
	}
	@Override
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_UP){ player.removePriority(Player.PRIORITYUP); }
		if(k == KeyEvent.VK_DOWN){ player.removePriority(Player.PRIORITYDOWN); }
		if(k == KeyEvent.VK_LEFT){ player.removePriority(Player.PRIORITYLEFT); }
		if(k == KeyEvent.VK_RIGHT){ player.removePriority(Player.PRIORITYRIGHT); }
		if(k == KeyEvent.VK_V){ player.setHighSpeed(false); }
	}
	
	public byte[] serialize() {
		byte[] data = SerializationUtils.serialize(this);
		return data;
	} 
	
	public static Level1State deserialize(byte[] data) {
		Level1State l1s = SerializationUtils.deserialize(data);
		return l1s;
	} 
}
