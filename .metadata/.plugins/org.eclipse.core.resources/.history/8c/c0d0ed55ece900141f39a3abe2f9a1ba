package Entity.PartyMembers;

import TileMap.*;
import Entity.Animation;
import Entity.Enemy;
import Entity.FireBall;
import Entity.NPC;
import Entity.PartyMember;
import Entity.Abilities.BasicAttack;
import Entity.Abilities.FireLevel1;
import Entity.Abilities.HealLevel1;
import Entity.Ability;

import java.util.ArrayList;

import javax.imageio.ImageIO;	// for reading in sprite sheets

import java.awt.*;
import java.awt.image.BufferedImage;

public class Player extends PartyMember {
	
	// player stuff
	private int fire;
	private int maxFire;
	private boolean flinching;
	private long flinchTimer;
	
	public static final int PRIORITYNONE = 0;
	public static final int PRIORITYUP = 1;
	public static final int PRIORITYRIGHT = 2;
	public static final int PRIORITYDOWN = 3;
	public static final int PRIORITYLEFT = 4;
	
	// animation actions
	
	private ArrayList<Integer> priority;	// idk why but this doesn't work as just int, you have to put Integer
	
	
	private int direction;
	
	private boolean highSpeed;
	
	// fireball
	private boolean firing; 	// for keyboard input
	private int fireCost;
	private int fireBallDamage;
	private ArrayList<FireBall> fireBalls;
	//private ArrayList<NPC> NPCs = new ArrayList<NPC>();
	
	private boolean chatting;
	
	// scratch
	private boolean scratching;
	private int scratchDamage;
	private int scratchRange;
	
	// gliding
	//private boolean gliding;
	
	// animations		
	private ArrayList<BufferedImage[]> sprites;
	/*private final int[] numFrames = {
		2, 8, 1, 2, 4, 2, 5			// number of frames per animation  DRAGON
	}; */
	private final int[] numFrames = {
		3, 3, 3, 3, 1, 1, 1, 1	
	};
	
	/* DRAGON
	// animation actions
	private static final int IDLE = 0;
	private static final int WALKING = 1;
	private static final int CHATTING = 2;
	//private static final int FALLING = 3;
	//private static final int GLIDING = 4;
	private static final int FIREBALL = 5;
	private static final int SCRATCHING = 6;
	*/
	
	public Player(TileMap tm){
		
		super(tm);
		dead = false;
		// animation actions
		WALKINGFRONT = 0;
		WALKINGLEFT = 1;
		WALKINGRIGHT = 2;
		WALKINGBACK = 3;
		IDLEFRONT = 4;
		IDLELEFT = 5;
		IDLERIGHT = 6;
		IDLEBACK = 7;
		
		//width = 30;		DRAGON
		//height = 30;		DRAGON
		height = 32;	// for reading in spritesheet CHAR
		width = 32;
		cwidth = 20;
		cheight = 20;
		
		moveSpeed = .3;
		maxSpeed = 1.6;
		stopSpeed = .4;
		//fallSpeed = .15;
		//maxFallSpeed = 4.0;
		//jumpStart = -4.8;
		//stopJumpSpeed = 0.3;
		
		//facingRight = true;			DRAGOn
		
		facingFront = true;
		highSpeed = false;
		
		health = maxHealth = 300;
		fire = maxFire = 1500;
		
		fireCost = 100;
		fireBallDamage = 5;
		fireBalls = new ArrayList<FireBall>();
		
		scratchDamage = 8;
		scratchRange = 40;
		
		BasicAttack b = new BasicAttack(30);
		knownAbilities = new ArrayList<Ability>();
		knownAbilities.add(b);
		numAbilities++;
		
		HealLevel1 cure = new HealLevel1();
		knownAbilities.add(cure);
		numAbilities++;
		
		FireLevel1 flame = new FireLevel1();
		knownAbilities.add(flame);
		numAbilities++;
		
		weaknesses = new ArrayList<Integer>();
		resistances = new ArrayList<Integer>();
		
		// load sprites CHAR1
		
		try{
			priority = new ArrayList<Integer>();
			BufferedImage spritesheet = ImageIO.read(getClass().getResourceAsStream("/Sprites/Player/char1.png"));
			sprites = new ArrayList<BufferedImage[]>();
			BufferedImage[] bi = new BufferedImage[3];
		/*	bi[0] = spritesheet.getSubimage(0, 0, width, height);
			bi[1] = spritesheet.getSubimage(32, 0, width, height);
			bi[2] = spritesheet.getSubimage(64, 0, width, height);
			sprites.add(bi); */
			for(int j = 0; j < 4; j++){		// since we have 4 walking animation actions
				bi = new BufferedImage[numFrames[j]];
				for(int k = 0; k < numFrames[j]; k++){
					bi[k] = spritesheet.getSubimage(k*width, j*height, width, height);
				}
				sprites.add(bi);
			}  
			spritesheet = ImageIO.read(getClass().getResourceAsStream("/Sprites/Player/char1Copy.png"));
			for(int j = 4; j < 8; j++){		// since we have 4 idle animation actions
				bi = new BufferedImage[numFrames[j]];					
				bi[0] = spritesheet.getSubimage(30, (j-4)*height, width, height);		// DO U KNOW HOW LONG IT TOOK ME TO FIGURE OUT (J-4) IT TOOK WAY TOO LONG
				sprites.add(bi);
			}
			facingLeftAnimation = new Animation();
			facingLeftAnimation.setFrames(sprites.get(WALKINGLEFT));
			facingLeftAnimation.setDelay(250);
	/*		BufferedImage[] bi = new BufferedImage[3];
			bi[0] = spritesheet.getSubimage() */
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
		
		// load sprites DRAGON
	/*	try{
			BufferedImage spritesheet = ImageIO.read(getClass().getResourceAsStream("/Sprites/Player/playersprites.gif"));
			
			sprites = new ArrayList<BufferedImage[]>();
			
			for(int j = 0; j < 7; j++){	// since we have 7 animatiion actions
				BufferedImage[] bi = new BufferedImage[numFrames[j]];
				for(int k = 0; k < numFrames[j]; k++){
					if(j != 6){
						bi[k] = spritesheet.getSubimage(k * width, j * height, width, height);
					}
					else{
						bi[k] = spritesheet.getSubimage(k * width * 2, j * height, width * 2, height);
					}
				}
				sprites.add(bi);
			}
		}
		catch(Exception e){
			e.printStackTrace();
		} */
		
		animation = new Animation();
		currentAction = IDLEFRONT;
		animation.setFrames(sprites.get(WALKINGFRONT));
		animation.setDelay(400);
		
	}
	
	public int getHealth() { return health; }
	public int getMaxHealth() { return maxHealth; }
	public int getFire() { return fire; }
	public int getMaxFire() { return maxFire; }
	//public boolean isDead() { return dead; }
	public boolean getChatting() { return chatting; }
	public void setCurrentAction(int action) { currentAction = action; }
	public void setMaxSpeed(double d) { maxSpeed = d; }
	public void setHighSpeed(boolean b) { highSpeed = b; }
	public void addPriority(int x) { 
		priority.add(x); 
		if(priority.size() > 10){
			//System.out.println(priority.size());
		}
	} 
	public void removePriority(int x){
		for(int j = 0; j < priority.size(); j++){
			if(priority.get(j) == x){
				priority.remove(j);
				//System.out.println(x);
				j--;
			}
		}
		//priority.remove(x);
/*		for(int j = 0; j < priority.size(); j++){
			if(priority.get(j) == x){
				priority.remove(x);
			}
		} */
	}
	public boolean priorityEmpty() {
		return priority.isEmpty();
	}
	public void emptyPriority() {
		priority.clear();
	}
	
	public void setFiring() { firing = true; }
	public void setScratching() { scratching = true; }
	public void setChatting(boolean b) { chatting = b; }
	
	public void checkAttack(ArrayList<Enemy> enemies){
		
		// loop through enemies
		
		for(int j = 0; j < enemies.size(); j++){
			Enemy e = enemies.get(j);
			// check scratch attack
			/*if(scratching){
				if(facingRight){
					if(
						e.getx() > x && 	// are they to our right
						e.getx() < x + scratchRange &&	// and in the attack range
						e.gety() > y - height/2 &&	// and near us in height
						e.gety() < y + height/2
					){
						e.hit(scratchDamage);
					}
				}
				else{
					if(
						e.getx() < x &&
						e.getx() > x - scratchRange &&
						e.gety() > y - height/2 &&
						e.gety() < y + height/2
					){
						e.hit(scratchDamage);
					}
				}
			} */
			
			// check fireballs
			
		/*	for(int k = 0; k < fireBalls.size(); k++){
				if(fireBalls.get(k).intersects(e)){
					e.hit(fireBallDamage);
					fireBalls.get(k).setHit();
				}
			} */
			
			// check enemy collision
			if(intersects(e)){
				hit(e.getDamage());
			}
		}
		
	}
	
	/*public void checkChatting(ArrayList<NPC> NPCs){
		// loop through NPCs
		for(int j = 0; j < NPCs.size(); j++){
			NPC n = NPCs.get(j);
			// check dialogue
			if(chatting){
				if(facingRight){
					if(
						n.getx() > x && 	// are they to our right
						n.getx() < x + scratchRange &&	// and in the attack range
						n.gety() > y - height/2 &&	// and near us in height
						n.gety() < y + height/2
					){
						n.setChatting(true);
					}
				}
				else{
					if(
						n.getx() < x &&
						n.getx() > x - scratchRange &&
						n.gety() > y - height/2 &&
						n.gety() < y + height/2
					){
						n.setChatting(true);
					}
				}
			}
			
			// check NPC collision
			if(intersects(n)){
				dy = 0;
				dx = 0;
			}
		}
		
	} */
	
	public int checkIfPlayerCanChat(ArrayList<NPC> NPCs){
		// loop through NPCs
		int npcNumber = -1;
		for(int j = 0; j < NPCs.size(); j++){
			NPC n = NPCs.get(j);
			// check dialogue
			if(facingRight){	// NPC is to the right
				if(			n.getx() > x &&
							n.getx() < (x + 35) &&
							n.gety() > (y - height/2) &&
							n.gety() < (y + height/2) ){
					chatting = true;
					n.setChatting(true);
				}
			}
			if(facingLeft){		// NPC is to the left
				if(			n.getx() < x &&
							n.getx() > (x - 35) &&
							n.gety() > (y - height/2) &&
							n.gety() < (y + height/2) ){
					chatting = true;
					n.setChatting(true);
				}
			}
			if(facingBack){		// NPC is above the player
				if(			n.getx() > (x - width/2) &&
							n.getx() < (x + width/2) &&
							n.gety() > (y - 35)		 &&
							n.gety() < (y)	 ){
					chatting = true;
					n.setChatting(true);
				}
			}
			if(facingFront){		// NPC is below the player
				if(			n.getx() > (x - width/2) &&
							n.getx() < (x + width/2) &&
							n.gety() > (y)			 &&
							n.gety() < (y + 35)	 ){
					chatting = true;
					n.setChatting(true);
				}
			}
			if(intersects(n)){
				dy = 0;
				dx = 0;
			}
			if(chatting){
				npcNumber = j;
				break;
			}
				
	/*			if(facingRight){
					if(
						n.getx() > x && 	// are they to our right
						n.getx() < x + scratchRange &&	// and in the attack range
						n.gety() > y - height/2 &&	// and near us in height
						n.gety() < y + height/2
					){
						n.setChatting(true);
					}
				}
				else{
					if(
						n.getx() < x &&
						n.getx() > x - scratchRange &&
						n.gety() > y - height/2 &&
						n.gety() < y + height/2
					){
						n.setChatting(true);
					}
				}  */
			/*}
			
			// check NPC collision
			if(intersects(n)){
				dy = 0;
				dx = 0;
			} (*/
		}
		return npcNumber;	
	}
	
/*	public void checkNPCCollision(){
		
		for(int j = 0; j < NPCs.size(); j++){
			
		}
		// if player hits NPC from above
		currCol = (int)x / tileSize;
		currRow = (int)y / tileSize;
		
		xdest = x + dx;
		ydest = y + dy;
		
		xtemp = x;
		ytemp = y;
		
		//boolean movedOnce = false;
		
		calculateCorners(x, ydest);
		if(dy < 0) {
			if(topLeft || topRight) {
				dy = 0;
				ytemp = currRow * tileSize + cheight / 2;
			}
			else {
				ytemp += dy;
				//movedOnce = true;
			}
		}
		else if(dy > 0) {
			if(bottomLeft || bottomRight){ // || movedOnce) {
				dy = 0;
				//falling = false;
				ytemp = (currRow + 1) * tileSize - cheight / 2;
			}
			else {
				ytemp += dy;
				//movedOnce = true;
			}
		}
		
		calculateCorners(xdest, y);
		
		if(dx < 0) {
			if(topLeft || bottomLeft){ // || movedOnce) {
				dx = 0;
				xtemp = currCol * tileSize + cwidth / 2;
			}
			else {
				xtemp += dx;
				//movedOnce = true;
			}
		}
		else if(dx > 0) {
			if(topRight || bottomRight){ // || movedOnce) {
				dx = 0;
				xtemp = (currCol + 1) * tileSize - cwidth / 2;
			}
			else {
				xtemp += dx;
				//movedOnce = true;
			}
		}
		
	} */
	
	public void hit(int damage){
		if(flinching) return;
		health -= damage;
		if(health < 0) health = 0;
		if(health == 0) dead = true;
		flinching = true;
		flinchTimer = System.nanoTime();
	}
	
	private void getNextPosition() {
		if(highSpeed == true) maxSpeed = 2.5;
		if(highSpeed == false) maxSpeed = 1.6;
		if(priority.isEmpty() || priority.get(priority.size() - 1) == PRIORITYNONE){
			//System.out.println("empty");
			up = false;
			right = false;
			down = false;
			left = false;
		}
		else{
			if(priority.get(priority.size() - 1) == PRIORITYUP){
				up = true;
				right = false;
				down = false;
				left = false;
			}
			if(priority.get(priority.size() - 1) == PRIORITYRIGHT){
				up = false;
				right = true;
				down = false;
				left = false;
			}
			if(priority.get(priority.size() - 1) == PRIORITYDOWN){
				up = false;
				right = false;
				down = true;
				left = false;
			}
			if(priority.get(priority.size() - 1) == PRIORITYLEFT){
				up = false;
				right = false;
				down = false;
				left = true;
			}
		}
		// movement
		if(chatting){
			chatting = false;
		} 
		else{
			boolean movedOnce = false;
			if(left){
				/*if(currentAction != WALKINGLEFT) 
					currentAction = WALKINGLEFT; */
				facingLeft = true;
				facingRight = false;
				facingBack = false;
				facingFront = false;
				dx -= moveSpeed;
				if(dx < -maxSpeed){
					dx = -maxSpeed;
				}
				movedOnce = true;
				//System.out.println("left");
			}
			else if(right) {
				//currentAction = WALKINGRIGHT;
				facingLeft = false;
				facingRight = true;
				facingBack = false;
				facingFront = false;
				dx += moveSpeed;
				if(dx > maxSpeed) {
					dx = maxSpeed;
				}
				//System.out.println("right");
				movedOnce = true;
			}
			else if(up){
				//currentAction = WALKINGBACK;
				facingLeft = false;
				facingRight = false;
				facingBack = true;
				facingFront = false;
				dy -= moveSpeed;
				if(dy < -maxSpeed){
					dy = -maxSpeed;
				}
				movedOnce = true;
				//System.out.println("up");
			}
			else if(down){
				//currentAction = WALKINGFRONT;
				facingLeft = false;
				facingRight = false;
				facingBack = false;
				facingFront = true;
				dy += moveSpeed;
				if(dy > maxSpeed){
					dy = maxSpeed;
				}
				movedOnce = true;
				//System.out.println("down");
			}
			if(!movedOnce){
				currentAction = 4;
				if(dx > 0){
					dx -= stopSpeed;
					if(dx < 0){
						dx = 0;
					}
				}
				else if(dx < 0) {
					dx += stopSpeed;
					if(dx > 0) {
						dx = 0;
					}
				}
				if(dy > 0){
					dy -= stopSpeed * 2;
					if(dy < 0){
						dy = 0;
					}
				}
				else if(dy < 0){
					dy += stopSpeed;
					if(dy > 0)
						dy = 0;
				}
			}
			
		/*	if(dy == 0 && dx == 0){
				currentAction = 4;
			} */
		}
		
		// cannot move while attacking except in the air
	/*	if((currentAction == SCRATCHING || currentAction == FIREBALL)){ //&& !(jumping || falling)){
			dx = 0; // we cannot move
		} */
		
		// jumping
	/*	if(jumping && !falling) {
			dy = jumpStart;
			falling = true;
		}
		
		// falling
		if(falling){
			if(dy > 0 && gliding) dy += fallSpeed * .1;
			else dy += fallSpeed;
			if(dy > 0) jumping = false;
			if(dy < 0 && !jumping) dy += stopJumpSpeed; // longer you hold jump button farther you jump
			if(dy > maxFallSpeed) dy = maxFallSpeed;
		} */
	}
	
	public void update() {
		// update position
		getNextPosition();
		checkTileMapCollision();
		//checkNPCCollision();
		setPosition(xtemp, ytemp);
		
		// check attack has stopped
	/*	if(currentAction == SCRATCHING){						DRAGON
			if(animation.hasPlayedOnce()) scratching = false;
		}
		if(currentAction == FIREBALL){
			if(animation.hasPlayedOnce()) firing = false;
		}
		if(currentAction == CHATTING){
			if(animation.hasPlayedOnce()) chatting = false;
		}  */
		
		
		// fireball attack
		fire+=1.5;
		if(fire > maxFire) fire = maxFire;
	/*	if(firing && currentAction != FIREBALL && currentAction != SCRATCHING) {
			if(fire > fireCost){
				fire -= fireCost;										DRAGON
				FireBall fb = new FireBall(tileMap, facingRight);
				fb.setPosition(x,  y);
				fireBalls.add(fb);
			}
		} */
		
		// update fireballs
		for(int j = 0; j < fireBalls.size(); j++){
			fireBalls.get(j).update();
			if(fireBalls.get(j).shouldRemove()){
				fireBalls.remove(j);
				j--;
			}
		}
		
		// check done flinching
		if(flinching){
			///System.out.println("flinching");
			long elapsed = (System.nanoTime() - flinchTimer) / 1000000;
			if(elapsed > 1000){
				flinching = false;
			}
		}
		
		
		// set animation
	/*	if(scratching){
			if(currentAction != SCRATCHING) {
				currentAction = SCRATCHING;
				animation.setFrames(sprites.get(SCRATCHING));
				animation.setDelay(50);
				width = 60;
			}
		}
		else if(firing){
			if(currentAction != FIREBALL) {
				currentAction = FIREBALL;
				animation.setFrames(sprites.get(FIREBALL));			DRAGON
				animation.setDelay(100);
				width = 30;
			}
		}
	/*	else if(chatting){
			if(currentAction != CHATTING){
				currentAction = CHATTING;
				animation.setFrames(sprites.get(IDLE));
				animation.setDelay(10);
				width = 30;
			}
		}  */
		if(left){
			if(currentAction != WALKINGLEFT){
				currentAction = WALKINGLEFT;
				//System.out.println("walking left");
				animation.setFrames(sprites.get(WALKINGLEFT));
				animation.setDelay(200);
				width = 30;
			}
		}
		else if(right){
			//System.out.println("RIGHT");
			if(currentAction != WALKINGRIGHT){
				currentAction = WALKINGRIGHT;
				//System.out.println("walking right");
				animation.setFrames(sprites.get(WALKINGRIGHT));
				animation.setDelay(200);
				width = 30;
			}
		}
		else if(down){
			//System.out.println("RIGHT");
			if(currentAction != WALKINGFRONT){
				currentAction = WALKINGFRONT;
				//System.out.println("walking right");
				animation.setFrames(sprites.get(WALKINGFRONT));
				animation.setDelay(200);
				width = 30;
			}
		}
		else if(up){
			//System.out.println("RIGHT");
			if(currentAction != WALKINGBACK){
				currentAction = WALKINGBACK;
				//System.out.println("walking right");
				animation.setFrames(sprites.get(WALKINGBACK));
				animation.setDelay(200);
				width = 30;
			}
		} /*
		else if(currentAction == WALKINGRIGHT){
			animation.setFrames(sprites.get(WALKINGRIGHT));
			//System.out.println(sprites.get(IDLERIGHT).length);
			System.out.println("WALKINGRIGHT");
			animation.setDelay(20);
			width = 30;
		}
		else if(currentAction == WALKINGLEFT){
			animation.setFrames(sprites.get(WALKINGLEFT));
			animation.setDelay(50);
			System.out.println("WALKINGLEFT");
			width = 30;
		}
		else if(currentAction == WALKINGFRONT){
			animation.setFrames(sprites.get(WALKINGFRONT));
			animation.setDelay(50);
			System.out.println("WALKINGFRONT");
			width = 30;
		}
		else if(currentAction == WALKINGBACK){
			animation.setFrames(sprites.get(WALKINGBACK));
			animation.setDelay(50);
			System.out.println("WALKINGBACK");
			width = 30;
		} */
/*		else if(currentAction == IDLEFRONT){
			System.out.println("IDLEFRONT");
			animation.setFrames(sprites.get(IDLEFRONT));
			animation.setDelay(-1);
			width = 30;
		}
		else if(currentAction == IDLELEFT){
			animation.setFrames(sprites.get(IDLELEFT));
			animation.setDelay(-1);
			width = 30;
		}
		else if(currentAction == IDLERIGHT){
			System.out.println("IDLERIGHT");
			animation.setFrames(sprites.get(IDLERIGHT));
			animation.setDelay(-1);
			width = 30;
		}
		else if(currentAction == IDLEBACK){
			animation.setFrames(sprites.get(IDLEBACK));
			animation.setDelay(-1);
			width = 30;
		} */
/*		else if(dy > 0){
			if(gliding){	// i left out this if-statement
				if(currentAction != GLIDING){
					currentAction = GLIDING;
					animation.setFrames(sprites.get(GLIDING));
					animation.setDelay(100);
					width = 30;
				}
			} */
		/*	else if(currentAction != FALLING) {
				currentAction = FALLING;
				animation.setFrames(sprites.get(FALLING));
				animation.setDelay(100);
				width = 30;
			} 
		} */
	//	else if(dy < 0){
		/*	if(currentAction != JUMPING) {
				currentAction = JUMPING;
				animation.setFrames(sprites.get(JUMPING));
				animation.setDelay(-1);
				width = 30;
			} */
	//	}
	/*	else if(left || right || up || down){
			if(currentAction != WALKING) {
				currentAction = WALKING;
				animation.setFrames(sprites.get(WALKING));
				animation.setDelay(40);
				width = 30;
			}
		} */
		else{
			//System.out.println(currentAction);
			if(currentAction >= 4){
				if(facingLeft){
					if(currentAction != IDLELEFT){
						//System.out.println("IDLELEFT");
						animation.setFrames(sprites.get(IDLELEFT));
						animation.setDelay(-1);
						width = 30;
					}
				}
				if(facingRight){
					//currentAction = IDLERIGHT;
					//System.out.println("IDLERIGHT");
					animation.setFrames(sprites.get(IDLERIGHT));
					animation.setDelay(-1);
					width = 30;
				}
				if(facingBack){
					//currentAction = IDLEBACK;
					//System.out.println("IDLEBACK");
					animation.setFrames(sprites.get(IDLEBACK));
					animation.setDelay(-1);
					width = 30;
				}
				if(facingFront){
					//currentAction = IDLEFRONT;
					//System.out.println("IDLEFRONT");
					animation.setFrames(sprites.get(IDLEFRONT));
					animation.setDelay(50);
					width = 30;
				}
				//System.out.println(currentAction);
			}
			/*if(currentAction != IDLE){
				currentAction = IDLE;
				animation.setFrames(sprites.get(IDLE));
				animation.setDelay(400);
				width = 30;
			} */
		}
		animation.update();
		
		// set direction
/*		if(currentAction != SCRATCHING && currentAction != FIREBALL){	// dont want moving during animation
			if(right) facingRight = true;
			if(left) facingRight = false;
		} */
	}
	
	public void draw(Graphics2D g) {
		setMapPosition(); 	// very important always do at the start 
		
		for(int j = 0; j < fireBalls.size(); j++){
			fireBalls.get(j).draw(g);
		}
		
		// draw player
		if(flinching) {
			long elapsed = (System.nanoTime() - flinchTimer) / 1000000;
			if(elapsed / 100 % 2 == 0){
				//System.out.println("flinching");
				return;	// gives appearance of blinking every 100 milliseconds
			}
		}
		//super.draw(g);
		g.drawImage(animation.getImage(), (int)(x + xmap - width / 2), (int)(y + ymap - height / 2), null);
		//System.out.println("asdf");
	}
}











